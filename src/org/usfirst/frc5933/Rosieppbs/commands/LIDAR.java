// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5933.Rosieppbs.commands;

import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5933.Rosieppbs.Robot;

/**
 *
 */
public class LIDAR extends Command {
	static final int LIDARLite_ADDRESS = 0x62;
	static final int MEASURE_REGISTER = 0x00;
	static final int MEASURE_VALUE = 0x04;
	static final int REGISTER_HIGHLOWB = 0x8f;
	static final int RESPONSE_LENGTH = 2;

    public LIDAR() {

    }

    private int makeUnsignedByte(byte b) {
    	return (int) b & 0xFF;
    }
    // Called just before this Command runs the first time
    public void getRange() {
    	I2C LIDARDevice;
    	LIDARDevice = new I2C(I2C.Port.kOnboard, LIDARLite_ADDRESS);
    	
    	byte[] initiateCommand = {MEASURE_REGISTER, MEASURE_VALUE};
    	byte[] readMeasurement = new byte[RESPONSE_LENGTH];
    	
    	try {
    		LIDARDevice.writeBulk(initiateCommand);
			Thread.sleep(20);
			LIDARDevice.write(REGISTER_HIGHLOWB,0x0);
			Thread.sleep(20);
			LIDARDevice.readOnly(readMeasurement, RESPONSE_LENGTH);
			
			int range = (makeUnsignedByte(readMeasurement[0])<<8) + makeUnsignedByte(readMeasurement[1]);
			System.out.println("Range is: " + range);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }

	@Override
	protected void initialize() {
		// TODO Auto-generated method stub
		
	}
}
